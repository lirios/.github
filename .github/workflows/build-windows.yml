# SPDX-FileCopyrightText: 2022 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# SPDX-License-Identifier: MIT

name: CI

on:
  workflow_call:
    inputs:
      output_name:
        type: string
        required: true
      qt_version:
        type: string
        default: "5.12.8"
        required: false

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  windows:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      matrix:
        compiler:
          - win32_msvc2017
        qt:
          - ${{ inputs.qt_version }}
    runs-on: windows-2016
    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache-${{ matrix.qt }}
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt }}
          arch: ${{ matrix.compiler }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - uses: actions/checkout@v2
      - name: Build
        run: |
          # Fluid
          git clone -b develop git://github.com/lirios/fluid.git
          cd fluid
          git submodule update --init --recursive
          cd ..
          # Application
          mkdir build
          cd build
          cmake .. -DLIRI_LOCAL_ECM:BOOL=ON
          cmake --build .
      - name: Package
        run: |
          mkdir github-release-artifacts
          mkdir out
          windeployqt --qmldir=src --dir=out --compiler-runtime --angle -qml -quick -svg build\src\Debug\${{ inputs.output_name }}.exe
          copy build\src\*.qm out/translations
          copy build\src\Debug\${{ inputs.output_name }}.exe out
          Compress-Archive -Path out\* -DestinationPath github-release-artifacts\${{ inputs.output_name }}.zip
      - name: Archive result
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: Windows
          path: github-release-artifacts/

  release:
    if: "!contains(github.event.head_commit.message, 'ci skip') && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')"
    runs-on: ubuntu-latest
    needs:
      - windows
    steps:
      - uses: actions/checkout@v2
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: Fill the release notes
          draft: true
          prerelease: false
      - name: Download Windows artifact
        uses: actions/download-artifact@v1
        with:
          name: Windows
      - name: Upload Windows artifact to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: github-release-artifacts/${{ inputs.output_name }}.zip
          asset_name: ${{ inputs.output_name }}.zip
          asset_content_type: application/zip
