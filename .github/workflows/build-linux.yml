# SPDX-FileCopyrightText: 2022 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# SPDX-License-Identifier: MIT

name: CI

on:
  workflow_call:
    inputs:
      clazy_checks:
        type: string
        default: "level1"
        required: false
      cmake_arguments_gcc:
        type: string
        required: false
      cmake_arguments_clang:
        type: string
        default: "-DLIRI_ENABLE_CLAZY:BOOL=ON"
        required: false
      build_dependencies:
        type: string
        default: "cmake-shared"
        required: false
      enable_autotests:
        type: boolean
        default: false
        required: false

env:
  CLAZY_CHECKS: "${{ inputs.clazy_checks }}"

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      matrix:
        compiler:
          - gcc
          - clang
        container:
          - suse-qt515
    runs-on: ubuntu-latest
    container:
      image: liridev/${{ matrix.container }}
    steps:
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          if [ -n "${{ github.base_ref }}" ]; then
            echo "##[set-output name=branch;]${{ github.base_ref }}"
          else
            github_ref=${{ github.ref }}
            echo "##[set-output name=branch;]${github_ref##*/}"
          fi
      - name: Qt version identifier
        id: qt_version
        shell: bash
        run: |
          qtverid=`echo "${{ matrix.container }}" | sed -e 's,suse-qt,,g'`
          echo "##[set-output name=id;]${qtverid}"
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: liri-infra/ci-scripts
          path: __ci_scripts
      - name: Build dependencies
        run: |
          set -x
          if [ "${{ matrix.compiler }}" == "clang" ]; then
            export CC=clang
            export CXX=clang++
          fi
          bash -x ./__ci_scripts/build-deps ${{ steps.extract_branch.outputs.branch }} ${{ inputs.build_dependencies }}
      - uses: ammaraskar/gcc-problem-matcher@master
      - name: Build
        run: |
          set -x
          mkdir -p build
          cd build
          if [ "${{ inputs.enable_autotests }}" == "true" ]; then
              args="-DBUILD_TESTING:BOOL=ON"
          else
              args="-DBUILD_TESTING:BOOL=OFF"
          fi
          if [ "${{ matrix.compiler }}" == "clang" ]; then
            export CC=clang
            export CXX=clang++
            cmake .. -DCMAKE_INSTALL_PREFIX=/usr $args ${{ inputs.cmake_arguments_clang }}
          else
            cmake .. -DCMAKE_INSTALL_PREFIX=/usr $args ${{ inputs.cmake_arguments_gcc }}
          fi
          make -j $(getconf _NPROCESSORS_ONLN)
          sudo make install
      - name: Test
        if: "inputs.enable_autotests"
        run: |
          set -x
          cd build
          dbus-run-session -- xvfb-run -a -s "-screen 0 800x600x24" ctest -V
