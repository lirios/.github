# SPDX-FileCopyrightText: 2022 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# SPDX-License-Identifier: MIT

name: CI

on:
  workflow_call:
    inputs:
      output_name:
        type: string
        required: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  osx:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    runs-on: macos-latest
    steps:
      - name: Install dependencies
        run: |
          brew update
          brew install qt5
          brew link qt5 --force
      - uses: actions/checkout@v3
      - name: Build
        run: |
          set -x
          export PATH="/usr/local/opt/qt/bin:$PATH"
          export LDFLAGS="-L/usr/local/opt/qt/lib"
          export CPPFLAGS="-I/usr/local/opt/qt/include"
          export PKG_CONFIG_PATH="/usr/local/opt/qt/lib/pkgconfig"
          # Fluid
          git clone -b develop git://github.com/lirios/fluid.git
          cd fluid
          git submodule update --init --recursive
          mkdir build
          cd build
          cmake .. \
              -DFLUID_WITH_DOCUMENTATION:BOOL=OFF \
              -DFLUID_WITH_DEMO:BOOL=OFF \
              -DCMAKE_INSTALL_PREFIX=/usr/local/opt/qt \
              -DINSTALL_LIBDIR=/usr/local/opt/qt/lib \
              -DINSTALL_QMLDIR=/usr/local/opt/qt/qml \
              -DINSTALL_PLUGINSDIR=/usr/local/opt/qt/lib/plugins
          make -j $(sysctl -n hw.ncpu)
          sudo make install
          cd ../..
          # Application
          mkdir build
          cd build
          cmake .. \
              -DLIRI_LOCAL_ECM:BOOL=ON \
              -DCMAKE_INSTALL_PREFIX=/opt/liri \
              -DINSTALL_LIBDIR=/opt/liri/lib \
              -DINSTALL_QMLDIR=/opt/liri/lib/qml \
              -DINSTALL_PLUGINSDIR=/opt/liri/lib/plugins
          make -j $(sysctl -n hw.ncpu)
      - name: Package
        run: |
          set -x
          outdir=$(pwd)/github-release-artifacts
          mkdir $outdir
          cd build
          srcdir=$(pwd)/../src
          macdeployqt src/${{ inputs.output_name }}.app -dmg -qmldir=$srcdir -verbose=2
          mv src/${{ inputs.output_name }}.dmg $outdir
      - name: Archive result
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: macOS
          path: github-release-artifacts/

  release:
    if: "!contains(github.event.head_commit.message, 'ci skip') && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')"
    runs-on: ubuntu-latest
    needs:
      - osx
    steps:
      - uses: actions/checkout@v3
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: Fill the release notes
          draft: true
          prerelease: false
      - name: Download macOS artifact
        uses: actions/download-artifact@v1
        with:
          name: macOS
      - name: Upload macOS artifact to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: github-release-artifacts/${{ inputs.output_name }}.dmg
          asset_name: ${{ inputs.output_name }}.dmg
          asset_content_type: application/octet-stream
