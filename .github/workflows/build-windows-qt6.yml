# SPDX-FileCopyrightText: 2024 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
# SPDX-License-Identifier: MIT

name: CI

on:
  workflow_call:
    inputs:
      cmake_arguments:
        type: string
        required: false
      build_dependencies:
        type: string
        default: "cmake-shared"
        required: false
      enable_autotests:
        type: boolean
        default: false
        required: false
      output_name:
        type: string
        required: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  windows-qt6:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      matrix:
        container:
          - kdeorg/windows-msvc2022-qt66:latest
        include:
          - container: kdeorg/windows-msvc2022-qt66:latest
            qtverid: 66
    runs-on: windows-latest
    steps:
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          if [ -n "${{ github.base_ref }}" ]; then
            echo "branch=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          else
            github_ref=${{ github.ref }}
            echo "branch=${github_ref##*/}" >> $GITHUB_OUTPUT
          fi
      - name: External build dependencies
        shell: bash
        run: |
          git clone https://invent.kde.org/frameworks/extra-cmake-modules.git
          cd extra-cmake-modules
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=C:/Program\ Files/Liri
          cmake --build .
          cmake --install .
      - name: Build dependencies
        shell: bash
        run: |
          deps=$(echo "${{ inputs.build_dependencies }}" | sed -e 's, ,:,g')
          for dep in ${deps//:/ }; do
            if [ "$repo" == "fluid" ]; then
              args="-DFLUID_WITH_DOCUMENTATION:BOOL=OFF"
            else
              args=""
            fi
            git clone -b "${{ steps.extract_branch.outputs.branch }}" https://github.com/lirios/${dep}
            cd $dep
            mkdir build
            cd build
            cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=C:/Program\ Files/Liri $args
            cmake --build .
            cmake --install .
            cd ../..
          done
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build
        shell: bash
        run: |
          mkdir build
          cd build
          if [ "${{ inputs.enable_autotests }}" == "true" ]; then
            args="-DBUILD_TESTING:BOOL=ON"
          else
            args="-DBUILD_TESTING:BOOL=OFF"
          fi
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=C:/Program\ Files/Liri -DCMAKE_EXPORT_COMPILE_COMMANDS=ON $args ${{ inputs.cmake_arguments }}
          cmake --build .
      - name: Package
        run: |
          mkdir github-release-artifacts
          mkdir out
          windeployqt --qmldir=src --dir=out --compiler-runtime --angle -qml -quick -svg build\src\Debug\${{ inputs.output_name }}.exe
          copy build\src\*.qm out/translations
          copy build\src\Debug\${{ inputs.output_name }}.exe out
          Compress-Archive -Path out\* -DestinationPath github-release-artifacts\${{ inputs.output_name }}.zip
      - name: Archive result
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: Windows
          path: github-release-artifacts/

  release:
    if: "!contains(github.event.head_commit.message, 'ci skip') && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')"
    runs-on: ubuntu-latest
    needs:
      - windows-qt6
    steps:
      - uses: actions/checkout@v4
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: Fill the release notes
          draft: true
          prerelease: false
      - name: Download Windows artifact
        uses: actions/download-artifact@v1
        with:
          name: Windows
      - name: Upload Windows artifact to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: github-release-artifacts/${{ inputs.output_name }}.zip
          asset_name: ${{ inputs.output_name }}.zip
          asset_content_type: application/zip
